package hana.test;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.json.JSONArray;
import org.json.JSONObject;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import kr.co.hana.schedule.vo.DetailFileVO;
import kr.co.hana.schedule.vo.ScheduleDetailVO;
import kr.co.hana.schedule.vo.ScheduleVO;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "classpath:config/spring/spring-mvc.xml" })
public class NoticeDetailTest {
	
	@Ignore
	@Test
	public void whyErr() throws IOException {
		List<ScheduleVO> resultList = new ArrayList<ScheduleVO>();
		StringBuilder urlBuilder = new StringBuilder("http://apis.data.go.kr/B552555/lhLeaseNoticeInfo1/lhLeaseNoticeInfo1"); /*URL*/
        urlBuilder.append("?" + URLEncoder.encode("ServiceKey","UTF-8") + "=wzVGH0RoH4TBmxGKJY4GBkDozdkN0n6aQcP6R3RFMGoyjFZzW6wLW5XW1ikRufIwVjTGMxqlOguEoEMgTQUqVw%3D%3D"); /*Service Key*/
        urlBuilder.append("&" + URLEncoder.encode("PG_SZ","UTF-8") + "=" + URLEncoder.encode("50", "UTF-8")); /*한 페이지 결과 수*/
        urlBuilder.append("&" + URLEncoder.encode("PAGE","UTF-8") + "=" + URLEncoder.encode("1", "UTF-8")); /*페이지 번호*/
        urlBuilder.append("&" + URLEncoder.encode("PAN_NM","UTF-8") + "=" + URLEncoder.encode("모집", "UTF-8")); /*공고명으로 조회*/
        urlBuilder.append("&" + URLEncoder.encode("UPP_AIS_TP_CD","UTF-8") + "=" + URLEncoder.encode("06", "UTF-8")); /*공고유형코드*/
        urlBuilder.append("&" + URLEncoder.encode("CNP_CD","UTF-8") + "=" + URLEncoder.encode("11", "UTF-8")); /*지역코드*/
        urlBuilder.append("&" + URLEncoder.encode("PAN_SS","UTF-8") + "=" + URLEncoder.encode("공고중", "UTF-8")); /*공고상태코드*/
        urlBuilder.append("&" + URLEncoder.encode("PAN_NT_ST_DT","UTF-8") + "=" + URLEncoder.encode("2021.09.11", "UTF-8")); /*공고게시일*/
        urlBuilder.append("&" + URLEncoder.encode("CLSG_DT","UTF-8") + "=" + URLEncoder.encode("2021.09.30", "UTF-8")); /*공고마감일*/
        
        String result = getSb(urlBuilder);
        System.out.println(result);
        JSONArray jArray = new JSONArray(result);
        JSONObject jObject = (JSONObject) jArray.get(1);
        JSONArray dsList = jObject.getJSONArray("dsList");

        for(int i=0; i<dsList.length(); i++) {
        	JSONObject list = (JSONObject) dsList.get(i);
        	if(list != null) {
        		ScheduleVO sche = new ScheduleVO();
        		sche.setPan_ss(list.getString("PAN_SS"));
        		sche.setPan_nt_st_dt(list.getString("PAN_NT_ST_DT"));
        		sche.setAis_tp_cd(list.getString("AIS_TP_CD"));
        		sche.setSpl_inf_tp_cd(list.getString("SPL_INF_TP_CD"));
        		sche.setCnp_cd_nm(list.getString("CNP_CD_NM"));
        		sche.setPan_id(list.getString("PAN_ID"));
        		sche.setAis_tp_cd_nm(list.getString("AIS_TP_CD_NM"));
        		sche.setClsg_dt(list.getString("CLSG_DT"));
        		sche.setPan_dt(list.getString("PAN_DT"));
        		sche.setUpp_ais_tp_cd(list.getString("UPP_AIS_TP_CD"));
        		sche.setPan_nm(list.getString("PAN_NM"));
        		sche.setDtl_url(list.getString("DTL_URL"));
        		sche.setCcr_cnnt_sys_ds_cd(list.getString("CCR_CNNT_SYS_DS_CD"));
        		
        		resultList.add(sche);
        	}
        }
        System.out.println(resultList.size());
	}
	
	
	@Ignore
	@Test
	public void check() throws IOException {
		
		ScheduleVO scvo = new ScheduleVO();
		/*
		scvo.setSpl_inf_tp_cd("063");
		scvo.setCcr_cnnt_sys_ds_cd("03");
		scvo.setPan_id("2015122300009564");
		scvo.setUpp_ais_tp_cd("06");
		scvo.setAis_tp_cd("10");
		*/
		scvo.setSpl_inf_tp_cd("062");
		scvo.setCcr_cnnt_sys_ds_cd("03");
		scvo.setPan_id("2015122300009566");
		scvo.setUpp_ais_tp_cd("06");
		scvo.setAis_tp_cd("07");
		
		
		StringBuilder urlBuilder = new StringBuilder("http://apis.data.go.kr/B552555/lhLeaseNoticeDtlInfo1/getLeaseNoticeDtlInfo1"); /*URL*/
        urlBuilder.append("?" + URLEncoder.encode("ServiceKey","UTF-8") + "=wzVGH0RoH4TBmxGKJY4GBkDozdkN0n6aQcP6R3RFMGoyjFZzW6wLW5XW1ikRufIwVjTGMxqlOguEoEMgTQUqVw%3D%3D"); /*Service Key*/
        urlBuilder.append("&" + URLEncoder.encode("SPL_INF_TP_CD","UTF-8") + "=" + URLEncoder.encode(scvo.getSpl_inf_tp_cd(), "UTF-8")); /*분양임대공고문조회 API의 특정 공고의 응답 메시지 중 공급정보구분코드*/
        urlBuilder.append("&" + URLEncoder.encode("CCR_CNNT_SYS_DS_CD","UTF-8") + "=" + URLEncoder.encode(scvo.getCcr_cnnt_sys_ds_cd(), "UTF-8")); /*분양임대공고문조회 API의 특정 공고의 응답 메시지 중 고객센터연계시스템구분코드*/
        urlBuilder.append("&" + URLEncoder.encode("PAN_ID","UTF-8") + "=" + URLEncoder.encode(scvo.getPan_id(), "UTF-8")); /*분양임대공고문조회 API의 특정 공고의 응답 메시지 중 공고아이디*/
        urlBuilder.append("&" + URLEncoder.encode("UPP_AIS_TP_CD","UTF-8") + "=" + URLEncoder.encode(scvo.getUpp_ais_tp_cd(), "UTF-8")); /*분양임대공고문조회 API의 특정 공고의 응답 메시지 중 상위매물유형코드*/
        urlBuilder.append("&" + URLEncoder.encode("AIS_TP_CD","UTF-8") + "=" + URLEncoder.encode(scvo.getAis_tp_cd(), "UTF-8")); /*분양임대공고문조회 API의 특정 공고의 응답 메시지 중 매물유형코드*/
        
        List<ScheduleDetailVO> resultList = new ArrayList<ScheduleDetailVO>();
        
        String result = getSb(urlBuilder);

        JSONArray jArray = new JSONArray(result);
        JSONObject jObject = (JSONObject) jArray.get(1);
        JSONObject checks = (JSONObject) jObject.getJSONArray("resHeader").get(0);
        String check = checks.getString("SS_CODE");
        System.out.println(check);

    }
	
	
	

	@Test
	public void getDetail() throws IOException {
		
		ScheduleVO scvo = new ScheduleVO();
		/*
		scvo.setSpl_inf_tp_cd("063");
		scvo.setCcr_cnnt_sys_ds_cd("03");
		scvo.setPan_id("2015122300009564");
		scvo.setUpp_ais_tp_cd("06");
		scvo.setAis_tp_cd("10");
		*/
		/*
		scvo.setSpl_inf_tp_cd("062");
		scvo.setCcr_cnnt_sys_ds_cd("03");
		scvo.setPan_id("2015122300009566");
		scvo.setUpp_ais_tp_cd("06");
		scvo.setAis_tp_cd("07");
		*/
		scvo.setSpl_inf_tp_cd("010");
		scvo.setCcr_cnnt_sys_ds_cd("01");
		scvo.setPan_id("2016122300001530");
		scvo.setUpp_ais_tp_cd("06");
		scvo.setAis_tp_cd("01");
		
		
		//UPP_AIS_TP_CD: "01",
		//AIS_TP_CD: "01",
		//SPL_INF_TP_CD: "010",
		//PAN_ID: "2016122300001530",
		//CCR_CNNT_SYS_DS_CD: "01"
		
		StringBuilder urlBuilder = new StringBuilder("http://apis.data.go.kr/B552555/lhLeaseNoticeDtlInfo1/getLeaseNoticeDtlInfo1"); /*URL*/
        urlBuilder.append("?" + URLEncoder.encode("ServiceKey","UTF-8") + "=wzVGH0RoH4TBmxGKJY4GBkDozdkN0n6aQcP6R3RFMGoyjFZzW6wLW5XW1ikRufIwVjTGMxqlOguEoEMgTQUqVw%3D%3D"); /*Service Key*/
        urlBuilder.append("&" + URLEncoder.encode("SPL_INF_TP_CD","UTF-8") + "=" + URLEncoder.encode(scvo.getSpl_inf_tp_cd(), "UTF-8")); /*분양임대공고문조회 API의 특정 공고의 응답 메시지 중 공급정보구분코드*/
        urlBuilder.append("&" + URLEncoder.encode("CCR_CNNT_SYS_DS_CD","UTF-8") + "=" + URLEncoder.encode(scvo.getCcr_cnnt_sys_ds_cd(), "UTF-8")); /*분양임대공고문조회 API의 특정 공고의 응답 메시지 중 고객센터연계시스템구분코드*/
        urlBuilder.append("&" + URLEncoder.encode("PAN_ID","UTF-8") + "=" + URLEncoder.encode(scvo.getPan_id(), "UTF-8")); /*분양임대공고문조회 API의 특정 공고의 응답 메시지 중 공고아이디*/
        urlBuilder.append("&" + URLEncoder.encode("UPP_AIS_TP_CD","UTF-8") + "=" + URLEncoder.encode(scvo.getUpp_ais_tp_cd(), "UTF-8")); /*분양임대공고문조회 API의 특정 공고의 응답 메시지 중 상위매물유형코드*/
        urlBuilder.append("&" + URLEncoder.encode("AIS_TP_CD","UTF-8") + "=" + URLEncoder.encode(scvo.getAis_tp_cd(), "UTF-8")); /*분양임대공고문조회 API의 특정 공고의 응답 메시지 중 매물유형코드*/
        
        List<ScheduleDetailVO> resultList = new ArrayList<ScheduleDetailVO>();
        
        String result = getSb(urlBuilder);

        JSONArray jArray = new JSONArray(result);
        JSONObject jObject = (JSONObject) jArray.get(1);
        Set haveKey = jObject.keySet();
        boolean chk = haveKey.contains("dsSbd");
        //System.out.println(chk);
        System.out.println(jObject.keySet());
        
        if(haveKey.contains("dsSplScdl") && haveKey.contains("dsSbd")) {
        	System.out.println("ㅎㅇ");
        }
        
        JSONArray count = jObject.getJSONArray("dsSplScdl");
        System.out.println(count.length());
        
        
        for(int c=0; c<count.length(); c++) {
        	
        	 ScheduleDetailVO schedule = new ScheduleDetailVO();
             JSONObject ds = (JSONObject) jObject.getJSONArray("dsSplScdl").get(c);
             //System.out.println(ds);
             schedule.setSbsc_acp_clsg_dt(ds.getString("SBSC_ACP_CLSG_DT"));
             schedule.setPpr_sbm_ope_anc_dt(ds.getString("PPR_SBM_OPE_ANC_DT"));
             schedule.setPpr_acp_clsg_dt(ds.getString("PPR_ACP_CLSG_DT"));
             schedule.setPzwr_anc_dt(ds.getString("PZWR_ANC_DT"));
             schedule.setCtrt_ed_dt(ds.getString("CTRT_ED_DT"));
             schedule.setSbsc_acp_st_dt(ds.getString("SBSC_ACP_ST_DT"));
             schedule.setCtrt_st_dt(ds.getString("CTRT_ST_DT"));
             schedule.setPpr_acp_st_dt(ds.getString("PPR_ACP_ST_DT"));
             
             JSONObject sbd = (JSONObject) jObject.getJSONArray("dsSbd").get(c);
             //System.out.println(sbd);
             schedule.setLgdn_adr(sbd.getString("LGDN_ADR"));
             schedule.setLgdn_dtl_adr(sbd.getString("LGDN_DTL_ADR"));
             schedule.setHsh_cnt(sbd.getString("HSH_CNT"));
             schedule.setHtn_fmla_desc(sbd.getString("HTN_FMLA_DESC"));
             schedule.setLcc_nt_nm(sbd.getString("LCC_NT_NM"));
             schedule.setDdo_ar(sbd.getString("DDO_AR"));
             schedule.setMvin_xpc_ym(sbd.getString("MVIN_XPC_YM"));
             
             JSONObject ctr = (JSONObject) jObject.getJSONArray("dsCtrtPlc").get(0);
             schedule.setSil_ofc_gud_fcts(ctr.getString("SIL_OFC_GUD_FCTS"));
             
             JSONObject etc = (JSONObject) jObject.getJSONArray("dsEtcInfo").get(0);
             schedule.setEtc_cts(etc.getString("ETC_CTS"));
             resultList.add(schedule);
        }
        //System.out.println(resultList.get(0));
        //System.out.println(resultList.get(1));
       
        //이미지
        JSONArray imgs = jObject.getJSONArray("dsSbdAhfl");
        List<DetailFileVO> imgList = new ArrayList<DetailFileVO>();
        for(int i=0; i<imgs.length();i++) {
        	JSONObject img = imgs.getJSONObject(i);
        	DetailFileVO imgvo = new DetailFileVO();
        	imgvo.setHomenm(img.getString("LCC_NT_NM"));
        	imgvo.setFilenm(img.getString("LS_SPL_INF_UPL_FL_DS_CD_NM"));
        	imgvo.setFileurl(img.getString("AHFL_URL"));
        	imgList.add(imgvo);
        }
        System.out.println(imgList.size());
        
        
        //다운로드 파일
        JSONArray files = jObject.getJSONArray("dsAhflInfo");
        List<DetailFileVO> fileList = new ArrayList<DetailFileVO>();
        for(int i=0; i<files.length(); i++) {
        	JSONObject file = files.getJSONObject(i);
        	DetailFileVO filevo = new DetailFileVO();
        	filevo.setFilenm(file.getString("CMN_AHFL_NM"));
        	filevo.setFileurl(file.getString("AHFL_URL"));
        	fileList.add(filevo);
        }
        System.out.println(fileList.size());

    }
	

	public String getSb(StringBuilder urlBuilder) throws IOException{
		 URL url = new URL(urlBuilder.toString());
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");
        conn.setRequestProperty("Content-type", "application/json");
        System.out.println("Response code: " + conn.getResponseCode());
        BufferedReader rd;
        if(conn.getResponseCode() >= 200 && conn.getResponseCode() <= 300) {
            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        } else {
            rd = new BufferedReader(new InputStreamReader(conn.getErrorStream()));
        }
        StringBuilder sb = new StringBuilder();
        String line;
        while ((line = rd.readLine()) != null) {
            sb.append(line);
        }
        rd.close();
        conn.disconnect();
        
        String result = sb.toString();
		return result;
	}
	

}
